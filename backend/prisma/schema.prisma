// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Professional {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  cpf String @unique @db.VarChar(12) 
  email String @unique
  phone String ?
  whatsapp String ?
  brief_description String
  password String
  image String?
  service Service @relation(fields: [serviceId], references: [id])
  serviceId Int
  work Work[]
  rating Rating[]
  user_favorite User_favorite[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("professionals")
}

model Work {
  id Int @id @default(autoincrement())
  professional Professional @relation(fields: [professionalId], references: [id])
  professionalId Int
  description String
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("works")
}

model Service {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  description String?
  professional Professional[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("services")
}

model User {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  cpf String @unique @db.VarChar(12)
  email String @unique
  password String
  image String?
  user_favorite User_favorite[]
  rating Rating[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model User_favorite {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  professional Professional @relation(fields: [professionalId], references: [id])
  professionalId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_favorites")
}

model Rating {
  id Int @id @default(autoincrement())
  note Int
  professional Professional @relation(fields: [professionalId], references: [id])
  professionalId Int
  user User @relation(fields: [userId], references: [id])
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ratings")
}
